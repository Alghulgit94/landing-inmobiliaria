/**
 * Reservation Service - Inmobiliaria Mega Proyectos
 * Service layer for managing reservation operations with Supabase
 *
 * Responsibilities:
 * - Submit reservations with transaction support
 * - Update lote estado to "reservado"
 * - Validate lot availability
 * - Handle errors with bilingual messages (Spanish/English)
 *
 * @requires supabase-client.js
 */

class ReservationService {
  constructor() {
    this.isProcessing = false;
    this.error = null;
  }

  /**
   * Submit a reservation and update lote estado
   * This operation is performed as a transaction:
   * 1. Validate lot exists and is disponible
   * 2. Insert reservation record
   * 3. Update lot estado to "reservado"
   *
   * @param {Object} reservationData - Reservation form data
   * @param {string} reservationData.firstName - First name
   * @param {string} reservationData.lastName - Last name
   * @param {string} reservationData.email - Email address
   * @param {string} reservationData.phone - Phone number
   * @param {string} reservationData.additionalMessage - Optional message
   * @param {string} reservationData.loteId - Lote ID (from URL)
   * @param {string} reservationData.loteamientoId - Loteamiento ID (from URL)
   * @param {Object} reservationData.lotDetails - Full lote data (optional for storage)
   * @returns {Promise<Object>} Response with success/error status and messages
   */
  async submitReservation(reservationData) {
    // Prevent concurrent submissions
    if (this.isProcessing) {
      return {
        success: false,
        error: {
          code: 'CONCURRENT_REQUEST',
          message_es: 'Ya hay una reservación en proceso. Por favor espere.',
          message_en: 'A reservation is already being processed. Please wait.'
        }
      };
    }

    this.isProcessing = true;
    this.error = null;

    try {
      // Validate required fields
      const validation = this.validateReservationData(reservationData);
      if (!validation.isValid) {
        this.isProcessing = false;
        return {
          success: false,
          error: {
            code: 'VALIDATION_ERROR',
            message_es: validation.message_es,
            message_en: validation.message_en,
            field: validation.field
          }
        };
      }

      // Get Supabase client
      const supabase = window.SupabaseClient;

      if (!supabase || !supabase.isReady()) {
        throw new Error('Supabase client not initialized');
      }

      const client = supabase.getClient();

      // Step 1: Fetch current lote data and validate availability
      const { data: loteData, error: fetchError } = await client
        .from('lotes')
        .select('id, nombre, estado, precio_usd, loteamiento_id')
        .eq('id', reservationData.loteId)
        .single();

      if (fetchError) {
        console.error('Error fetching lote:', fetchError);
        this.isProcessing = false;
        return {
          success: false,
          error: {
            code: 'LOT_NOT_FOUND',
            message_es: 'El lote solicitado no existe.',
            message_en: 'The requested lot does not exist.',
            details: fetchError.message
          }
        };
      }

      // Validate lot is disponible
      const estadoLower = (loteData.estado || '').toLowerCase();
      if (!estadoLower.includes('disponible')) {
        this.isProcessing = false;
        return {
          success: false,
          error: {
            code: 'LOT_NOT_AVAILABLE',
            message_es: `Este lote ya no está disponible. Estado actual: ${loteData.estado}`,
            message_en: `This lot is no longer available. Current status: ${loteData.estado}`,
            current_estado: loteData.estado
          }
        };
      }

      // Step 2: Insert reservation record
      const reservationRecord = {
        first_name: reservationData.firstName.trim(),
        last_name: reservationData.lastName.trim(),
        email: reservationData.email.trim().toLowerCase(),
        // email_lower is auto-generated by database trigger/function - do not set manually
        phone: reservationData.phone ? reservationData.phone.trim() : null,
        additional_message: reservationData.additionalMessage ? reservationData.additionalMessage.trim() : null,
        lot_id: reservationData.loteId,
        lot_details: reservationData.lotDetails || {
          nombre: loteData.nombre,
          precio_usd: loteData.precio_usd,
          loteamiento_id: loteData.loteamiento_id
        },
        reservation_date: new Date().toISOString(),
        status: 'pending'
      };

      const { data: insertedReservation, error: insertError } = await client
        .from('reservations')
        .insert([reservationRecord])
        .select()
        .single();

      if (insertError) {
        console.error('Error inserting reservation:', insertError);
        this.isProcessing = false;

        // Check for duplicate email constraint
        if (insertError.code === '23505' || insertError.message.includes('duplicate')) {
          return {
            success: false,
            error: {
              code: 'DUPLICATE_RESERVATION',
              message_es: 'Ya existe una reservación con este correo electrónico para este lote.',
              message_en: 'A reservation with this email already exists for this lot.',
              details: insertError.message
            }
          };
        }

        return {
          success: false,
          error: {
            code: 'INSERT_FAILED',
            message_es: 'Error al guardar la reservación. Por favor intente nuevamente.',
            message_en: 'Failed to save reservation. Please try again.',
            details: insertError.message
          }
        };
      }

      // Step 3: Update lote estado to "reservado"
      const { error: updateError } = await client
        .from('lotes')
        .update({
          estado: 'reservado',
          updated_at: new Date().toISOString()
        })
        .eq('id', reservationData.loteId);

      if (updateError) {
        console.error('Error updating lote estado:', updateError);

        // Rollback: Delete the reservation if estado update failed
        await client
          .from('reservations')
          .delete()
          .eq('id', insertedReservation.id);

        this.isProcessing = false;

        return {
          success: false,
          error: {
            code: 'UPDATE_ESTADO_FAILED',
            message_es: 'Error al actualizar el estado del lote. La reservación ha sido cancelada.',
            message_en: 'Failed to update lot status. The reservation has been cancelled.',
            details: updateError.message
          }
        };
      }

      // Success!
      this.isProcessing = false;

      console.log('✓ Reservation created successfully:', insertedReservation.id);

      return {
        success: true,
        data: {
          reservation_id: insertedReservation.id,
          lot_id: reservationData.loteId,
          lot_name: loteData.nombre,
          customer_email: reservationData.email,
          reservation_date: insertedReservation.reservation_date
        },
        message_es: '¡Reservación enviada exitosamente! Nos pondremos en contacto con usted pronto.',
        message_en: 'Reservation submitted successfully! We will contact you soon.'
      };

    } catch (error) {
      this.error = error.message;
      this.isProcessing = false;

      console.error('Unexpected error in submitReservation:', error);

      return {
        success: false,
        error: {
          code: 'UNEXPECTED_ERROR',
          message_es: 'Error inesperado al procesar la reservación. Por favor intente nuevamente.',
          message_en: 'Unexpected error processing reservation. Please try again.',
          details: error.message
        }
      };
    }
  }

  /**
   * Validate reservation data
   * @param {Object} data - Reservation data
   * @returns {Object} Validation result
   */
  validateReservationData(data) {
    // Required fields validation
    if (!data.firstName || data.firstName.trim().length === 0) {
      return {
        isValid: false,
        field: 'firstName',
        message_es: 'El nombre es obligatorio.',
        message_en: 'First name is required.'
      };
    }

    if (!data.lastName || data.lastName.trim().length === 0) {
      return {
        isValid: false,
        field: 'lastName',
        message_es: 'El apellido es obligatorio.',
        message_en: 'Last name is required.'
      };
    }

    if (!data.email || data.email.trim().length === 0) {
      return {
        isValid: false,
        field: 'email',
        message_es: 'El correo electrónico es obligatorio.',
        message_en: 'Email is required.'
      };
    }

    // Email format validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(data.email)) {
      return {
        isValid: false,
        field: 'email',
        message_es: 'Por favor, ingrese un correo electrónico válido.',
        message_en: 'Please enter a valid email address.'
      };
    }

    if (!data.phone || data.phone.trim().length === 0) {
      return {
        isValid: false,
        field: 'phone',
        message_es: 'El teléfono es obligatorio.',
        message_en: 'Phone is required.'
      };
    }

    // Phone format validation
    const phoneRegex = /^[\+]?[1-9][\d]{0,15}$/;
    const cleanPhone = data.phone.replace(/[\s\-\(\)]/g, '');
    if (!phoneRegex.test(cleanPhone) || cleanPhone.length < 10) {
      return {
        isValid: false,
        field: 'phone',
        message_es: 'Por favor, ingrese un número de teléfono válido (mínimo 10 dígitos).',
        message_en: 'Please enter a valid phone number (minimum 10 digits).'
      };
    }

    if (!data.loteId) {
      return {
        isValid: false,
        field: 'loteId',
        message_es: 'ID de lote inválido.',
        message_en: 'Invalid lot ID.'
      };
    }

    // Additional message length validation (optional field)
    if (data.additionalMessage && data.additionalMessage.length > 500) {
      return {
        isValid: false,
        field: 'additionalMessage',
        message_es: 'El mensaje adicional no puede superar los 500 caracteres.',
        message_en: 'Additional message cannot exceed 500 characters.'
      };
    }

    return { isValid: true };
  }

  /**
   * Check if service is currently processing a reservation
   * @returns {boolean}
   */
  isCurrentlyProcessing() {
    return this.isProcessing;
  }

  /**
   * Get last error message
   * @returns {string|null}
   */
  getLastError() {
    return this.error;
  }
}

// Export as singleton instance
if (typeof window !== 'undefined') {
  window.ReservationService = new ReservationService();
}
